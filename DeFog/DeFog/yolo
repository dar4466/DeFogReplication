# YOLO


# link local address to the config file :- UPDATE THIS TO THE LOCATION OF THE CONFIG SCRIPT
source ~/DeFog/Experiments/DeFog/configs/config.sh

# create local variables from config :- UPDATE CONFIG LOCATIONS
cloudaddress=$cloudaddress
clouduser=$clouduser
edgeaddress1=$edgeaddress1
edgeaddress2=$edgeaddress2
edgeuser1=$edgeuser1
edgeuser2=$edgeuser2
awskey=$awskey
cloudpublicip=$cloudpublicip
configslocation=~/DeFog/Experiments/DeFog/configs/*
configfilelocation=~/DeFog/Experiments/DeFog/configs/config.sh

# create the various results file/filenames (data file, verbose data file, jmeter file, taurus file)
function create_result_files {
	verbose_filename=result
	metrics_verbose_filename=metrics
	filenumber=""
	
	cd results
	if [[ -e $verbose_filename.txt ]] ; then
		i=0
		while [[ -e $verbose_filename-$i.txt ]] ; do
			let i++
		done
		filenumber=$i
		verbose_filename=$verbose_filename-$i
	fi
	if [[ -e $metrics_verbose_filename.txt ]] ; then
		i=0
		while [[ -e $metrics_verbose_filename-$i.txt ]] ; do
			let i++
		done
		filenumber=$i
		metrics_verbose_filename=$metrics_verbose_filename-$i
	fi
	cd ../
}

# print and display the ascii header
function display_ascii_header {

	echo "  ___      ___            _ ";
	echo " |   \ ___| __|__  __ _  (_)";
	echo " | |) / -_) _/ _ \/ _\` |  _ ";
	echo " |___/\___|_|\___/\__, | (_)";
	echo "                  |___/     ";
	echo ""
	echo -e "DeFog: " | tee $verbose_filename.txt
	echo -e "	Demystifying Fog Systems Interaction via Container based benchmarking." | tee $verbose_filename.txt
	echo -e "	Created by: Jonathan McChesney, student at Queen's University Belfast" | tee -a $verbose_filename.txt
	echo -e "	CSC4006 Final Year Research and Development Project" | tee -a $verbose_filename.txt
	echo -e "" | tee -a $verbose_filename.txt
	echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
	echo -e "*****************************************************************************" | tee -a $verbose_filename.txt
	echo -e "" | tee -a $verbose_filename.txt
}

# utility function to determine the platform pipeline based on user input
function env_user_input {
while true; do
	echo "Environments:"
		echo ""
		echo "0. Cloud Only"
		echo "1. Edge Only"
		echo "2. Cloud & Edge"
		echo ""
  read -p "What environment would you like to benchmark: [0,1,2] " ANS
  case $ANS in 
    '1') 
       environment="-e" 
       break;; 
    *) 
       echo "Wrong input, try again";;
  esac
done
}

# utility function to determine the edge device address (i.e. ipaddress) based on user input
function edgeaddress_selector {
	if [ "$environment" == "-e" ];
	then
		while true; do
			echo ""
			echo -e "Please select your edge node device:"
				echo ""
				echo "0. Odroid XU4"
				echo "1. Raspberry Pi"
				echo ""
		  read -p "What actions would you like to run:[0,1] " ANS
		  case $ANS in 
			'0') 
			   edgeaddress=$edgeaddress1
			   edgeuser=$edgeuser1
			   break;;
			'1') 
			   edgeaddress=$edgeaddress2
			   edgeuser=$edgeuser2
			   break;;  	
			*) 
			   echo "Wrong input, try again";;
		  esac
		done
	fi
}

# utility function to determine the platform actions to be perfomed based on user input
function actions_user_input {
while true; do
	echo "Actions:"
		echo ""
		echo "0. Run DeFog Platform Benchmarks"
		echo "1. Run DeFog, Sysbench & UnixBench Platform Benchmarks"
		echo "2. Run Network Benchmark"
		echo "3. Run I/O Benchmark"
		echo "4. Run Sysbench"
		echo "5. Run UnixBench"
		echo "6. Remove Docker Containers & DeFog Architecture"
		echo "7. None"
		echo ""
  read -p "What actions would you like to run:[0,1,2,3,4,5,6,7] " ANS
  case $ANS in 
	'0') 
       actions="-g"   
	   break;;
    '1') 
       actions="-a"
       break;;
    '2') 
       actions="-d"
       break;;
	'3') 
       actions="-f" 
       break;;  
	'4') 
       actions="-s"
       break;;
    '5') 
       actions="-u"
       break;;
	'6') 
       actions="-x"
	   break;;
	'7') 
       actions="-n"  
       break;;   	
    *) 
       echo "Wrong input, try again";;
  esac
done
}

# utility function to determine the platform application to be benchmarked based on user input
function applications_user_input {
while true; do
	echo -e
	echo -e "Fog Applications:"
		echo ""
		echo "0. Yolo"
		echo "1. PocketSphinx"
		echo "2. Aeneas"
		echo "3. iPokeMon (build and run)"
		echo "4. iPokeMon (run benchmarks only)"
		echo "5. FogLAMP"
		echo "6. None"
		echo ""
  read -p "What Applications would you like to benchmark: [0,1,2,3,4,5,6] " ANS
  case $ANS in 
    '0') 
       applications="-y"
       break;;
    '1') 
       applications="-p" 
       break;;
	'2') 
       applications="-j"
       break;;
	'3') 
       applications="-i"
       break;;	   
	'4') 
       applications="-k"
       break;;   
	'5') 
       applications="-l"
       break;;
	'6') 
       applications="-m"
       break;; 	   
    *) 
       echo "Wrong input, try again";;
  esac
done
}



# application main

	create_result_files
	display_ascii_header
	
	#display_help $1

	
	env_user_input
		
	if [ "$environment" == "-e" ]; # edge only
	then	
		echo ""
		echo -e "Edge Only Benchmarks: " | tee -a $verbose_filename.txt
		seperator
		echo "" | tee -a $verbose_filename.txt		
		
		edgeaddress_selector
		actions_user_input
		applications_user_input
		
	fi	
	echo -e
	
	(
		export actions
		export environment
		export applications
		export filenumber
		export verbose_filename
		export metrics_verbose_filename
		export edgeaddress
		export edgeaddress1
		export edgeaddress2
		export edgeuser
		export edgeuser1
		export edgeuser2
		export awskey
		export cloudpublicip
		export configslocation
		export configfilelocation
		
		source ./defogexecute
	)

